name: draft-covers

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: Supabase user id
        required: true
      request_id:
        description: job_requests id (UUID)
        required: true
      top:
        description: Top roles to draft from Your Shortlist
        required: false
        default: "5"

permissions:
  contents: read

# One active drafting pass per user
concurrency:
  group: drafts-${{ inputs.user_id }}
  cancel-in-progress: true

env:
  PYTHONPATH: ${{ github.workspace }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  GH_REPO: ${{ github.repository }}
  GH_RUN_ID: ${{ github.run_id }}
  USE_LLM: "1"
  OPENAI_MODEL: gpt-4o-mini
  # tailoring toggles
  TAILOR_INLINE_ONLY: "1"
  TAILOR_SMART_INSERT: "1"
  TAILOR_MID_SENTENCE_STYLE: "dash"   # comma | dash | auto
  TAILOR_DASH_THRESHOLD: "7"
  TAILOR_CAP_SENTENCE: "1"
  TAILOR_END_PERIOD: "1"
  COVER_TONE: professional

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Validate required secrets
        shell: bash
        run: |
          set -euo pipefail
          test -n "${SUPABASE_URL:-}" || { echo "SUPABASE_URL missing"; exit 1; }
          test -n "${SUPABASE_SERVICE_ROLE_KEY:-}" || { echo "SUPABASE_SERVICE_ROLE_KEY missing"; exit 1; }

      - name: Checkout repo
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install OS tools
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install Python deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt python-docx requests pyyaml beautifulsoup4 jinja2 openai

      # ---- status: job_requests -> running
      - name: Mark job_requests running
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -m 60 -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"running"}'

      # ---- telemetry: create runs row for drafting
      - name: Create runs row
        id: create_run
        shell: bash
        run: |
          set -euo pipefail
          STARTED_AT="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          RUN_PAYLOAD=$(jq -n \
            --arg uid "${{ github.event.inputs.user_id }}" \
            --arg rid "${{ github.event.inputs.request_id }}" \
            --arg wf  "draft-covers" \
            --arg repo "${GH_REPO}" \
            --arg run  "${GH_RUN_ID}" \
            --arg started "$STARTED_AT" \
            '{user_id:$uid,
              request_id:$rid,                     # UUID stays string
              workflow:$wf,
              github_repo:$repo,
              github_run_id: ($run|tonumber),      # numeric
              status:"running",
              started_at:$started}')
          curl -sS -m 60 -X POST \
            "${SUPABASE_URL%/}/rest/v1/runs" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            --data "$RUN_PAYLOAD" \
            | jq -r '.[0].id // empty' > run_id.txt || true
          echo "RUN_ID=$(cat run_id.txt)" >> $GITHUB_ENV

      # -------- CLEANUP (remote + local) --------
      - name: Clean previous objects in outputs/<uid>/*
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          # Use proper bulk remove endpoint
          curl -sS -m 60 -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/outputs/remove" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            --data "$(jq -n --arg u "$uid" '{prefixes: [
              ($u + "/outbox/"),
              ($u + "/resumes/"),
              ($u + "/changes/"),
              ($u + "/drafts_index.json")
            ]}')" || true

      - name: Clean local workspace dirs
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          rm -rf "docs/${uid}"
          rm -f  docs/data/drafts_index.json
          mkdir -p "docs/${uid}/outbox" "docs/${uid}/resumes" "docs/${uid}/changes" docs/data

      # -------- PIPELINE --------
      - name: Download shortlist (scores.json) from Storage if present
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -f -m 60 \
            "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/scores.json" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -o docs/data/scores.json || echo "No scores.json found; will use repo fallback"

      - name: Ensure shortlist exists (repo or downloaded)
        shell: bash
        run: |
          set -euo pipefail
          test -f docs/data/scores.json || { echo "[]" > docs/data/scores.json; }

      - name: Build TOP-N shortlist
        shell: bash
        run: |
          set -euo pipefail
          N="${{ github.event.inputs.top }}"
          SRC="docs/data/scores.json"
          DST="docs/data/scores.top.json"
          jq --argjson n "$N" '
            def topn(a): (a | sort_by((.score // 0)) | reverse | .[:$n]);
            if type == "array"      then topn(.)
            elif has("jobs")  then topn(.jobs)
            elif has("items") then topn(.items)
            elif has("links") then topn(.links)
            else [] end
          ' "$SRC" > "$DST"
          if [ ! -s "$DST" ]; then cp "$SRC" "$DST"; fi

      - name: Fetch user's latest resume
        shell: bash
        run: |
          set -euo pipefail
          python scripts/fetch_user_assets.py --user "${{ github.event.inputs.user_id }}"

      - name: Parse resume & patch profile
        shell: bash
        run: |
          set -euo pipefail
          python scripts/parse_resume.py --user "${{ github.event.inputs.user_id }}"

      - name: Draft covers + tailor resumes (single pass)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        shell: bash
        run: |
          set -euo pipefail
          python scripts/draft_email.py \
            --top "${{ github.event.inputs.top }}" \
            --user "${{ github.event.inputs.user_id }}"

      - name: Build drafts_index.json from docs/<uid>/*
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          base="docs/${uid}"
          mkdir -p docs/data
          shopt -s nullglob

          OUTBOX_LIST=()
          for f in "$base/outbox/"*.md; do OUTBOX_LIST+=("$(basename "$f")"); done

          RESUME_LIST=()
          for f in "$base/resumes/"*.docx; do RESUME_LIST+=("$(basename "$f")"); done

          CHANGES_LIST=()
          for f in "$base/changes/"*.json; do
            b="$(basename "$f")"
            [[ $b == *_plan.json ]] && continue
            CHANGES_LIST+=("$b")
          done

          jq -n \
            --argjson outbox  "$(printf '%s\n' "${OUTBOX_LIST[@]:-}"  | jq -R . | jq -s .)" \
            --argjson resumes "$(printf '%s\n' "${RESUME_LIST[@]:-}" | jq -R . | jq -s .)" \
            --argjson changes "$(printf '%s\n' "${CHANGES_LIST[@]:-}" | jq -R . | jq -s .)" \
            '{outbox:$outbox, resumes:$resumes, changes:$changes}' \
          > docs/data/drafts_index.json

      # -------- UPLOADS --------
      - name: Upload covers (markdown)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          shopt -s nullglob
          for f in "docs/${uid}/outbox/"*.md; do
            key="outputs/${uid}/outbox/$(basename "$f")"
            curl -sS -m 60 -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: text/markdown" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload resumes (docx)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          shopt -s nullglob
          for f in "docs/${uid}/resumes/"*.docx; do
            key="outputs/${uid}/resumes/$(basename "$f")"
            curl -sS -m 60 -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload change logs (json)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          shopt -s nullglob
          for f in "docs/${uid}/changes/"*.json; do
            b="$(basename "$f")"
            [[ $b == *_plan.json ]] && continue
            key="outputs/${uid}/changes/$b"
            curl -sS -m 60 -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/json" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload JD excerpts (txt)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          shopt -s nullglob
          for f in "docs/${uid}/changes/"*.jd.txt; do
            key="outputs/${uid}/changes/$(basename "$f")"
            curl -sS -m 60 -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: text/plain" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload drafts_index.json
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          test -f docs/data/drafts_index.json || echo '{"outbox":[],"resumes":[],"changes":[]}' > docs/data/drafts_index.json
          key="outputs/${{ github.event.inputs.user_id }}/drafts_index.json"
          curl -sS -m 60 -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/$key" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "x-upsert: true" \
            --data-binary @docs/data/drafts_index.json

      # -------- STATUS --------
      - name: Mark job_requests done + runs done
        if: ${{ success() }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -m 60 -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"done"}'
          curl -sS -m 60 -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/runs?github_run_id=eq.${{ env.GH_RUN_ID }}&workflow=eq.draft-covers" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"done","finished_at":"'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"}'

      - name: Mark job_requests error + runs error
        if: ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          MSG=$(jq -n --arg m "draft-covers failed; check GH logs" '{"status":"error","message":$m}')
          curl -sS -m 60 -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data "$MSG"
          curl -sS -m 60 -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/runs?github_run_id=eq.${{ env.GH_RUN_ID }}&workflow=eq.draft-covers" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"error","finished_at":"'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'","message":"failed"}'
