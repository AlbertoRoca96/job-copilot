name: draft-covers

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: "Supabase user id"
        required: true
      request_id:
        description: "job_requests id"
        required: true
      top:
        description: "Number of top roles to draft"
        required: false
        default: "5"

permissions:
  contents: read

env:
  PYTHONPATH: ${{ github.workspace }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  # flip to "0" to suppress LLM even if key exists
  USE_LLM: "1"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt python-docx requests pyyaml beautifulsoup4

      - name: Mark job_requests running
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"running"}'

      # -------- CLEANUP (remote + local) --------
      - name: Clean previous objects in outputs/<uid>/*
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          # Delete previous artifacts so only fresh ones appear
          curl -sS -X DELETE \
            "${SUPABASE_URL%/}/storage/v1/object/outputs" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            --data "$(jq -n --arg u "$uid" '{prefixes: [
              ($u + "/outbox/"),
              ($u + "/resumes/"),
              ($u + "/changes/"),
              ($u + "/drafts_index.json")
            ]}')"

      - name: Clean local workspace dirs
        shell: bash
        run: |
          set -euo pipefail
          rm -rf docs/outbox docs/resumes docs/changes
          rm -f  docs/data/drafts_index.json
          mkdir -p docs/outbox docs/resumes docs/changes docs/data

      # -------- PIPELINE --------
      - name: Download shortlist scores.json from Storage
        shell: bash
        run: |
          set -euo pipefail
          # Server-to-server: use SRK directly (no signed URL needed)
          curl -sS -f \
            "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/scores.json" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -o docs/data/scores.json || echo "No scores.json found; proceeding"

      - name: Fetch user's latest resume
        shell: bash
        run: |
          set -euo pipefail
          python scripts/fetch_user_assets.py --user "${{ github.event.inputs.user_id }}"

      - name: Run drafting (covers + tailored resumes)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          USE_LLM: ${{ env.USE_LLM }}
        shell: bash
        run: |
          set -euo pipefail
          python scripts/draft_email.py --top "${{ github.event.inputs.top }}" --user "${{ github.event.inputs.user_id }}"

      - name: Build drafts_index.json (only uploaded file types)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs/data
          shopt -s nullglob

          OUTBOX_LIST=()
          for f in docs/outbox/*.md; do OUTBOX_LIST+=("$(basename "$f")"); done

          # Only .docx resumes (we upload .docx, not .md)
          RESUME_LIST=()
          for f in docs/resumes/*.docx; do RESUME_LIST+=("$(basename "$f")"); done

          # Only JSON change logs (exclude *.jd.txt)
          CHANGES_LIST=()
          for f in docs/changes/*.json; do CHANGES_LIST+=("$(basename "$f")"); done

          jq -n \
            --argjson outbox  "$(printf '%s\n' "${OUTBOX_LIST[@]:-}"  | jq -R . | jq -s .)" \
            --argjson resumes "$(printf '%s\n' "${RESUME_LIST[@]:-}" | jq -R . | jq -s .)" \
            --argjson changes "$(printf '%s\n' "${CHANGES_LIST[@]:-}" | jq -R . | jq -s .)" \
            '{outbox:$outbox, resumes:$resumes, changes:$changes}' \
          > docs/data/drafts_index.json

          echo "Built drafts_index.json:"
          cat docs/data/drafts_index.json

      # -------- UPLOADS --------
      - name: Upload covers (markdown)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in docs/outbox/*.md; do
            key="outputs/${{ github.event.inputs.user_id }}/outbox/$(basename "$f")"
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: text/markdown" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload resumes (docx)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in docs/resumes/*.docx; do
            key="outputs/${{ github.event.inputs.user_id }}/resumes/$(basename "$f")"
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload change logs (json)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in docs/changes/*.json; do
            key="outputs/${{ github.event.inputs.user_id }}/changes/$(basename "$f")"
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/json" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload drafts_index.json
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          # If the index doesn't exist (e.g., earlier step failed), create a minimal one
          test -f docs/data/drafts_index.json || echo '{"outbox":[],"resumes":[],"changes":[]}' > docs/data/drafts_index.json

          key="outputs/${{ github.event.inputs.user_id }}/drafts_index.json"
          curl -sS -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/$key" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "x-upsert: true" \
            --data-binary @docs/data/drafts_index.json

      - name: Upload run artifacts (debug)
        uses: actions/upload-artifact@v4
        with:
          name: drafts-run-${{ github.event.inputs.user_id }}
          path: |
            docs/outbox/
            docs/resumes/
            docs/changes/
            docs/data/drafts_index.json
          if-no-files-found: warn
          retention-days: 7

      # -------- STATUS --------
      - name: Mark job_requests done
        if: ${{ success() }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"done"}'

      - name: Mark job_requests error
        if: ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          MSG=$(jq -n --arg m "draft-covers failed; check GH logs" '{"status":"error","message":$m}')
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data "$MSG"
