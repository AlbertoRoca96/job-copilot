name: draft-covers

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: "Supabase user id"
        required: true
      request_id:
        description: "job_requests id"
        required: true
      top:
        description: "Top roles to draft from Your Shortlist"
        required: false
        default: "5"

permissions:
  contents: read

# Prevent parallel drafting for the same user
concurrency:
  group: drafts-${{ inputs.user_id }}
  cancel-in-progress: true

env:
  PYTHONPATH: ${{ github.workspace }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  USE_LLM: "1"
  TAILOR_INLINE_ONLY: "1"
  OPENAI_MODEL: gpt-4o-mini

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Install OS tools we use
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt python-docx requests pyyaml beautifulsoup4 jinja2 openai

      - name: Mark job_requests running
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"running"}'

      # -------- CLEANUP (remote + local) --------
      - name: Clean previous objects in outputs/<uid>/*
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          curl -sS -X DELETE \
            "${SUPABASE_URL%/}/storage/v1/object/outputs" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            --data "$(jq -n --arg u "$uid" '{prefixes: [
              ($u + "/outbox/"),
              ($u + "/resumes/"),
              ($u + "/changes/"),
              ($u + "/drafts_index.json")
            ]}')"

      - name: Clean local workspace dirs
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          rm -rf "docs/${uid}"
          rm -f  docs/data/drafts_index.json
          mkdir -p "docs/${uid}/outbox" "docs/${uid}/resumes" "docs/${uid}/changes" docs/data

      # -------- PIPELINE --------
      - name: Download shortlist scores.json from Storage (if present)
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -f \
            "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/scores.json" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -o docs/data/scores.json || echo "No scores.json found; proceeding with repo file if present"

      - name: Ensure shortlist exists (repo or downloaded)
        shell: bash
        run: |
          set -euo pipefail
          test -f docs/data/scores.json || { echo "[]">docs/data/scores.json; echo "Created empty docs/data/scores.json"; }

      - name: Build TOP-N shortlist (Your Shortlist â†’ top by score)
        shell: bash
        run: |
          set -euo pipefail
          N="${{ github.event.inputs.top }}"
          SRC="docs/data/scores.json"
          DST="docs/data/scores.top.json"
          jq --argjson n "$N" '
            def topn(a): (a | sort_by((.score // 0)) | reverse | .[:$n]);
            if type == "array"      then topn(.)
            elif has("jobs")  then topn(.jobs)
            elif has("items") then topn(.items)
            elif has("links") then topn(.links)
            else [] end
          ' "$SRC" > "$DST"
          echo "Selected TOP-$N from Your Shortlist:"
          jq -r '.[] | "\(.score // 0)\t\(.title // "")\t\(.company // "")\t\(.url // .link // .jd_url // "")"' "$DST" || true
          if [ ! -s "$DST" ]; then cp "$SRC" "$DST"; fi

      - name: Fetch user's latest resume
        shell: bash
        run: |
          set -euo pipefail
          python scripts/fetch_user_assets.py --user "${{ github.event.inputs.user_id }}"

      - name: Parse resume & patch profile
        shell: bash
        run: |
          set -euo pipefail
          python scripts/parse_resume.py --user "${{ github.event.inputs.user_id }}"

      - name: Tailor resumes from live JDs (LLM-assisted weaving)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        shell: bash
        run: |
          set -euo pipefail
          python src/tailor/resume.py \
            --links docs/data/scores.top.json \
            --resume assets/current.docx \
            --out docs \
            --user "${{ github.event.inputs.user_id }}"

      - name: Build drafts_index.json (based on docs/<uid>/*)
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          base="docs/${uid}"
          mkdir -p docs/data
          shopt -s nullglob
          OUTBOX_LIST=()
          for f in "$base/outbox/"*.md; do OUTBOX_LIST+=("$(basename "$f")"); done
          RESUME_LIST=()
          for f in "$base/resumes/"*.docx; do RESUME_LIST+=("$(basename "$f")"); done
          CHANGES_LIST=()
          for f in "$base/changes/"*.json; do CHANGES_LIST+=("$(basename "$f")"); done
          jq -n \
            --argjson outbox  "$(printf '%s\n' "${OUTBOX_LIST[@]:-}"  | jq -R . | jq -s .)" \
            --argjson resumes "$(printf '%s\n' "${RESUME_LIST[@]:-}" | jq -R . | jq -s .)" \
            --argjson changes "$(printf '%s\n' "${CHANGES_LIST[@]:-}" | jq -R . | jq -s .)" \
            '{outbox:$outbox, resumes:$resumes, changes:$changes}' \
          > docs/data/drafts_index.json
          echo "Built drafts_index.json:"
          cat docs/data/drafts_index.json

      # -------- UPLOADS --------
      - name: Upload covers (markdown)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          shopt -s nullglob
          for f in "docs/${uid}/outbox/"*.md; do
            key="outputs/${uid}/outbox/$(basename "$f")"
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: text/markdown" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload resumes (docx)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          shopt -s nullglob
          for f in "docs/${uid}/resumes/"*.docx; do
            key="outputs/${uid}/resumes/$(basename "$f")"
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload change logs (json)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          uid="${{ github.event.inputs.user_id }}"
          shopt -s nullglob
          for f in "docs/${uid}/changes/"*.json; do
            key="outputs/${uid}/changes/$(basename "$f")"
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/$key" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/json" \
              -H "x-upsert: true" \
              --data-binary @"$f"
          done

      - name: Upload drafts_index.json
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          key="outputs/${{ github.event.inputs.user_id }}/drafts_index.json"
          curl -sS -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/$key" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "x-upsert: true" \
            --data-binary @docs/data/drafts_index.json

      # -------- STATUS --------
      - name: Mark job_requests done
        if: ${{ success() }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"done"}'

      - name: Mark job_requests error
        if: ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          MSG=$(jq -n --arg m "draft-covers failed; check GH logs" '{"status":"error","message":$m}')
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data "$MSG"
