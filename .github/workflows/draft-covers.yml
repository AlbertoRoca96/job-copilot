name: draft-covers

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: Supabase user id
        required: true
      top:
        description: "Number of top roles to draft"
        required: false
        default: "5"
      request_id:
        description: Optional job_requests id for bookkeeping
        required: false
        default: ""

permissions:
  contents: read

env:
  PYTHONPATH: ${{ github.workspace }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  # LLM toggle (0 disables even if key exists)
  USE_LLM: "1"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt python-docx requests pyyaml beautifulsoup4

      - name: Prepare per-user inputs (scores + profile)
        run: |
          set -euo pipefail
          mkdir -p docs/data src/core

          # 1) Download user's shortlist (scores.json) from Storage -> docs/data/scores.json
          curl -sS -X GET \
            "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/scores.json" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -o docs/data/scores.json || echo "[]">docs/data/scores.json

          # 2) Fetch live profile row -> src/core/profile.yaml (renderers expect YAML file)
          curl -sS \
            "${SUPABASE_URL%/}/rest/v1/profiles?id=eq.${{ github.event.inputs.user_id }}&select=*" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -o docs/data/profile.json

          python - << 'PY'
import json, yaml, sys, os
p = "docs/data/profile.json"
raw = open(p, "r", encoding="utf-8").read().strip()
arr = json.loads(raw) if raw else []
obj = (arr[0] if isinstance(arr, list) and arr else {})
# write YAML the cover renderer expects
os.makedirs("src/core", exist_ok=True)
with open("src/core/profile.yaml", "w", encoding="utf-8") as f:
    yaml.safe_dump(obj, f, sort_keys=False, allow_unicode=True)
print("Wrote src/core/profile.yaml")
PY

      - name: Draft cover letters & resumes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          USE_LLM: ${{ env.USE_LLM }}
        run: |
          python scripts/draft_email.py --top ${{ github.event.inputs.top }}

      - name: Upload generated covers to Storage (outputs/<uid>/outbox)
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in docs/outbox/*.md; do
            bn=$(basename "$f")
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/outbox/${bn}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: text/markdown" \
              -H "x-upsert: true" \
              --data-binary @"$f" >/dev/null
          done

      - name: Upload tailored resumes to Storage (outputs/<uid>/resumes)
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in docs/resumes/*.docx; do
            bn=$(basename "$f")
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/resumes/${bn}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document" \
              -H "x-upsert: true" \
              --data-binary @"$f" >/dev/null
          done

      - name: Upload change logs to Storage (outputs/<uid>/changes)
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in docs/changes/*.json; do
            bn=$(basename "$f")
            curl -sS -X POST \
              "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/changes/${bn}" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/json" \
              -H "x-upsert: true" \
              --data-binary @"$f" >/dev/null
          done

      - name: Mark job_requests as done
        if: ${{ success() && github.event.inputs.request_id != '' }}
        run: |
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"done"}'

      - name: Mark job_requests as error
        if: ${{ failure() && github.event.inputs.request_id != '' }}
        run: |
          MSG=$(jq -n --arg m "draft-covers failed; check GH logs" '{"status":"error","message":$m}')
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data "$MSG"
