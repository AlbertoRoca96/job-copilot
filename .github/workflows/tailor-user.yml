name: tailor-user

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: Supabase user id
        required: true
      request_id:
        description: job_requests id
        required: true

permissions:
  contents: read

concurrency:
  group: tailor-${{ inputs.user_id }}
  cancel-in-progress: true

env:
  PYTHONPATH: ${{ github.workspace }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  GH_REPO: ${{ github.repository }}
  GH_RUN_ID: ${{ github.run_id }}

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install OS tools we use
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install Python deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt python-docx requests pyyaml beautifulsoup4

      # ---- mark job_requests running
      - name: Mark job_requests as running
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"running"}'

      # ---- create runs row
      - name: Create runs row
        id: create_run
        shell: bash
        run: |
          set -euo pipefail
          RUN_PAYLOAD=$(jq -n \
            --arg uid "${{ github.event.inputs.user_id }}" \
            --arg rid "${{ github.event.inputs.request_id }}" \
            --arg wf  "tailor-user" \
            --arg repo "${GH_REPO}" \
            --arg run  "${GH_RUN_ID}" \
            '{user_id:$uid, request_id: ($rid|tonumber), workflow:$wf, github_repo:$repo, github_run_id: ($run|tonumber), status:"running", started_at: (now|toiso8601)}')
          curl -sS -X POST \
            "${SUPABASE_URL%/}/rest/v1/runs" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            --data "$RUN_PAYLOAD" \
            | jq -r '.[0].id // empty' > run_id.txt
          echo "RUN_ID=$(cat run_id.txt)" >> $GITHUB_ENV

      - name: Fetch user's latest resume
        shell: bash
        run: |
          set -euo pipefail
          python scripts/fetch_user_assets.py --user "${{ github.event.inputs.user_id }}"

      - name: Parse resume -> PATCH profile (replaces skills/contacts)
        shell: bash
        run: |
          set -euo pipefail
          python scripts/parse_resume.py --user "${{ github.event.inputs.user_id }}"

      - name: Crawl boards -> persist jobs -> data/jobs.jsonl
        shell: bash
        run: |
          set -euo pipefail
          python scripts/crawl.py --user "${{ github.event.inputs.user_id }}"

      - name: Rank jobs
        shell: bash
        run: |
          set -euo pipefail
          python scripts/rank.py --user "${{ github.event.inputs.user_id }}"

      - name: Export profile JSON (service role)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs/data
          curl -sS \
            "${SUPABASE_URL%/}/rest/v1/profiles?id=eq.${{ github.event.inputs.user_id }}&select=*" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -o docs/data/profile.raw.json
          jq '.[0] // {}' docs/data/profile.raw.json > docs/data/profile.json
          rm -f docs/data/profile.raw.json

      - name: Upload shortlist to outputs/<uid>/scores.json
        shell: bash
        run: |
          set -euo pipefail
          OUT_JSON="docs/data/scores.json"
          test -f "$OUT_JSON"
          curl -sS -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/scores.json" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "x-upsert: true" \
            --data-binary @"$OUT_JSON"

      - name: Upload profile to outputs/<uid>/profile.json
        shell: bash
        run: |
          set -euo pipefail
          PROF_JSON="docs/data/profile.json"
          test -f "$PROF_JSON"
          curl -sS -X POST \
            "${SUPABASE_URL%/}/storage/v1/object/outputs/${{ github.event.inputs.user_id }}/profile.json" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "x-upsert: true" \
            --data-binary @"$PROF_JSON"

      - name: Upload run artifacts (optional)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -s docs/data/scores.json ]; then
            KEY="outputs/${{ github.event.inputs.user_id }}/scores.json"
            BYTES=$(wc -c < docs/data/scores.json | tr -d ' ')
            PAYLOAD=$(jq -n \
              --arg uid "${{ github.event.inputs.user_id }}" \
              --arg rid "${RUN_ID}" \
              --arg kind "scores" \
              --arg key  "$KEY" \
              --arg path "docs/data/scores.json" \
              --argjson bytes $BYTES \
              '{user_id:$uid, run_id: ($rid|tonumber), kind:$kind, storage_key:$key, path_hint:$path, bytes:$bytes}')
            curl -sS -X POST \
              "${SUPABASE_URL%/}/rest/v1/artifacts" \
              -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
              -H "Content-Type: application/json" \
              --data "$PAYLOAD" >/dev/null
          fi

      - name: Mark job_requests done + runs done
        if: ${{ success() }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"done"}'
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/runs?github_run_id=eq.${{ env.GH_RUN_ID }}&workflow=eq.tailor-user" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"done","finished_at":"'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"}'

      - name: Mark job_requests error + runs error
        if: ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          MSG=$(jq -n --arg m "worker failed; check GH logs" '{"status":"error","message":$m}')
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/job_requests?id=eq.${{ github.event.inputs.request_id }}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data "$MSG"
          curl -sS -X PATCH \
            "${SUPABASE_URL%/}/rest/v1/runs?github_run_id=eq.${{ env.GH_RUN_ID }}&workflow=eq.tailor-user" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE_KEY}" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            --data '{"status":"error","finished_at":"'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'","message":"failed"}'
